!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARRAY	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
CFLAGS	makefile	/^CFLAGS = -g$/;"	m
CHAR	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
CURSOR	lex.c	23;"	d	file:
C_SRC	makefile	/^C_SRC = error.c input.c ucl.c$/;"	m
Coord	input.h	/^}*Coord;    \/\/行列信息$/;"	t	typeref:struct:coord
DOUBLE	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
END_OF_FILE	input.c	/^unsigned char END_OF_FILE = 255;$/;"	v
ENUM	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
FLOAT	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
FUNCTION	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
Fatal	error.c	/^void Fatal(const char *format, ...)$/;"	f
HIGH_1BIT	lex.h	43;"	d
HIGH_3BIT	lex.h	42;"	d
HIGH_4BIT	lex.h	41;"	d
INT	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
Input	input.c	/^struct input Input;$/;"	v	typeref:struct:input
IsDigit	lex.h	35;"	d
IsHexDigit	lex.h	37;"	d
IsLetter	lex.h	38;"	d
IsLetterOrDigit	lex.h	39;"	d
IsOctDigit	lex.h	36;"	d
LINE	lex.c	24;"	d	file:
LINEHEAD	lex.c	25;"	d	file:
LONG	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
LONGDOUBULE	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
LONGLONG	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
OBJS	makefile	/^OBJS = $(C_SRC:.c=.o)$/;"	m
POINTER	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
SHORT	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
STRUCT	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
TK_BEGIN	lex.h	/^	TK_BEGIN,$/;"	e	enum:token
TOKEN	lex.c	32;"	d	file:
TOKEN	lex.c	34;"	d	file:
TOKEN	lex.h	22;"	d
TOKEN	lex.h	24;"	d
ToUpper	lex.h	40;"	d
TokenCoord	lex.c	/^struct coord TokenCoord;$/;"	v	typeref:struct:coord
TokenValue	lex.c	/^union value TokenValue;$/;"	v	typeref:union:value
UCHAR	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
UINT	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
ULONG	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
ULONGLONG	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
UNION	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
USHORT	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
VOID	type.h	/^	CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, ENUM, FLOAT, DOUBLE, LONGDOUBULE, POINTER, VOID, UNION, STRUCT, ARRAY, FUNCTION$/;"	e	enum:type
base	input.h	/^	unsigned char *base;  	 \/* 映射的文件基指针 *\/$/;"	m	struct:input
cc	makefile	/^cc = gcc$/;"	m
closeSourceFile	input.c	/^void closeSourceFile(void)$/;"	f
col	input.h	/^	int col;$/;"	m	struct:coord
coord	input.h	/^typedef struct coord$/;"	s
cursor	input.h	/^	unsigned char *cursor;	 \/* 读取文件当前位置 *\/$/;"	m	struct:input
d	lex.h	/^	double d;$/;"	m	union:value
error_INC	error.h	20;"	d
f	lex.h	/^	float f;$/;"	m	union:value
file	input.h	/^	void *file;$/;"	m	struct:input
filename	input.h	/^	char *filename;$/;"	m	struct:coord
filename	input.h	/^	char *filename;$/;"	m	struct:input
i	lex.h	/^	int i[2];$/;"	m	union:value
input	input.h	/^struct input$/;"	s
input_INC	input.h	21;"	d
keyword	keywords.h	/^struct keyword$/;"	s
keywords	keywords.h	/^static struct keyword *keywords[] =$/;"	v	typeref:struct:keyword
keywordsA	keywords.h	/^static struct keyword keywordsA[] = $/;"	v	typeref:struct:keyword
keywordsB	keywords.h	/^static struct keyword keywordsB[] = $/;"	v	typeref:struct:keyword
keywordsC	keywords.h	/^static struct keyword keywordsC[] = $/;"	v	typeref:struct:keyword
keywordsD	keywords.h	/^static struct keyword keywordsD[] =$/;"	v	typeref:struct:keyword
keywordsE	keywords.h	/^static struct keyword keywordsE[] =$/;"	v	typeref:struct:keyword
keywordsF	keywords.h	/^static struct keyword keywordsF[] =$/;"	v	typeref:struct:keyword
keywordsG	keywords.h	/^static struct keyword keywordsG[] = $/;"	v	typeref:struct:keyword
keywordsH	keywords.h	/^static struct keyword keywordsH[] =$/;"	v	typeref:struct:keyword
keywordsI	keywords.h	/^static struct keyword keywordsI[] = $/;"	v	typeref:struct:keyword
keywordsJ	keywords.h	/^static struct keyword keywordsJ[] = $/;"	v	typeref:struct:keyword
keywordsK	keywords.h	/^static struct keyword keywordsK[] = $/;"	v	typeref:struct:keyword
keywordsL	keywords.h	/^static struct keyword keywordsL[] = $/;"	v	typeref:struct:keyword
keywordsM	keywords.h	/^static struct keyword keywordsM[] = $/;"	v	typeref:struct:keyword
keywordsN	keywords.h	/^static struct keyword keywordsN[] = $/;"	v	typeref:struct:keyword
keywordsO	keywords.h	/^static struct keyword keywordsO[] = $/;"	v	typeref:struct:keyword
keywordsP	keywords.h	/^static struct keyword keywordsP[] = $/;"	v	typeref:struct:keyword
keywordsQ	keywords.h	/^static struct keyword keywordsQ[] = $/;"	v	typeref:struct:keyword
keywordsR	keywords.h	/^static struct keyword keywordsR[] = $/;"	v	typeref:struct:keyword
keywordsS	keywords.h	/^static struct keyword keywordsS[] = $/;"	v	typeref:struct:keyword
keywordsT	keywords.h	/^static struct keyword keywordsT[] = $/;"	v	typeref:struct:keyword
keywordsU	keywords.h	/^static struct keyword keywordsU[] = $/;"	v	typeref:struct:keyword
keywordsV	keywords.h	/^static struct keyword keywordsV[] = $/;"	v	typeref:struct:keyword
keywordsW	keywords.h	/^static struct keyword keywordsW[] = $/;"	v	typeref:struct:keyword
keywordsX	keywords.h	/^static struct keyword keywordsX[] = $/;"	v	typeref:struct:keyword
keywordsY	keywords.h	/^static struct keyword keywordsY[] = $/;"	v	typeref:struct:keyword
keywordsZ	keywords.h	/^static struct keyword keywordsZ[] = $/;"	v	typeref:struct:keyword
keywords_	keywords.h	/^static struct keyword keywords_[] = $/;"	v	typeref:struct:keyword
keywords_INC	keywords.h	21;"	d
len	keywords.h	/^	int len;$/;"	m	struct:keyword
line	input.h	/^	int line;$/;"	m	struct:coord
line	input.h	/^	int line;$/;"	m	struct:input
linehead	input.h	/^	unsigned char *linehead; \/* 读取一行*\/$/;"	m	struct:input
main	test.c	/^int main(int argc, char *argv[])$/;"	f
main	ucl.c	/^int main(int argc, char *argv[])$/;"	f
name	keywords.h	/^	char *name;$/;"	m	struct:keyword
p	lex.h	/^	void *p;$/;"	m	union:value
ppline	input.h	/^	int ppline;$/;"	m	struct:coord
prevCoord	lex.c	/^struct coord prevCoord;$/;"	v	typeref:struct:coord
readSourceFile	input.c	/^void readSourceFile(char *filename)$/;"	f
size	input.h	/^	unsigned long size;$/;"	m	struct:input
tok	keywords.h	/^	int tok;$/;"	m	struct:keyword
token	lex.h	/^enum token$/;"	g
type	type.h	/^enum type$/;"	g
ucl_INC	ucl.h	21;"	d
value	lex.h	/^union value$/;"	u
